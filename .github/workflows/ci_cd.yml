name: Trendscout CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

jobs:
  lint_and_format_check:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run Black (Format Check)
        run: poetry run black --check .

      - name: Run Flake8 (Linter)
        run: poetry run flake8 .

  run_tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint_and_format_check
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Set up environment variables for tests
        env:
          POSTGRES_SERVER: localhost
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          OLLAMA_API_BASE_URL: http://mock-ollama:11434/api
          OLLAMA_MODEL_NAME: mock-model
          SECRET_KEY: testsecretkeyforci
          ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          FIRST_SUPERUSER_EMAIL: admin@example.com
          FIRST_SUPERUSER_PASSWORD: testpassword123
          PYTHONPATH: ./src
        run: |
          echo "Running Alembic migrations..."
          poetry run alembic upgrade head
          echo "Running pytest..."
          poetry run pytest tests/ -v --cov=src/trendscout --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} 
          fail_ci_if_error: true
          files: ./coverage.xml

  build_and_push_docker_image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: run_tests
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Docker image tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/trendscout
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}


      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
